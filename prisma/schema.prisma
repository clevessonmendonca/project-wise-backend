datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  name              String?
  password          String?
  googleId          String?
  picture           String?
  refreshToken      String?
  resetToken        String?
  resetTokenExpires DateTime?
  roles             Role[]      @relation("UserRoles")
  projects          Project[]   @relation("ProjectUsers")
  tasks             Task[]      @relation("TaskAssignees")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  UserRole          UserRole[]
  Comment           Comment[]
  ChangeLog         ChangeLog[]
  Team              Team[]      @relation("TeamMembers")
  Feedback          Feedback[]

  FavoriteBoard FavoriteBoard[]
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  users          User[]           @relation("UserRoles")
  permissions    Permission[]     @relation("RolePermissions")
  createdAt      DateTime         @default(now())
  userRoles      UserRole[]       @relation("RoleUserRoles")
  UserRole       UserRole[]       @relation("RoleNameUserRoles")
  RolePermission RolePermission[]
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  roleName   String
  user       User     @relation(fields: [userId], references: [id])
  roleById   Role     @relation("RoleUserRoles", fields: [roleId], references: [id])
  roleByName Role     @relation("RoleNameUserRoles", fields: [roleName], references: [name])
  createdAt  DateTime @default(now())
}

model Permission {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  roles          Role[]           @relation("RolePermissions")
  createdAt      DateTime         @default(now())
  RolePermission RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
}

model Workspace {
  id        String    @id @default(uuid())
  name      String    @unique
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  iconUrl   String    @default("HomeIcon")
}

model Project {
  id           String               @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  status       String?
  priority     Int?
  budget       Float?
  goals        String[]
  dependencies String[]
  feedback     Feedback[]
  risks        Risk[]
  resources    ResourceAllocation[]
  teams        Team[]
  changeLogs   ChangeLog[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  functionalRequirements    String[]
  nonFunctionalRequirements String[]

  users  User[]  @relation("ProjectUsers")
  boards Board[] @relation("ProjectBoards")

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  Comment Comment[]
  Board   Board[]
}

model Board {
  id          String   @id @default(uuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  tasks       Task[]   @relation("BoardTasks")
  createdAt   DateTime @default(now())

  Task    Task[]
  Project Project[] @relation("ProjectBoards")

  FavoriteBoard FavoriteBoard[]
}

model FavoriteBoard {
  id        String   @id @default(uuid())
  userId    String
  boardId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  board Board @relation(fields: [boardId], references: [id])

  @@unique([userId, boardId])
}

model Task {
  id          String   @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      String?
  priority    Int?
  boardId     String
  board       Board    @relation(fields: [boardId], references: [id])
  assignees   User[]   @relation("TaskAssignees")
  createdAt   DateTime @default(now())

  Board Board[] @relation("BoardTasks")
}

model Feedback {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Risk {
  id          String   @id @default(uuid())
  description String
  likelihood  Int
  impact      Int
  mitigation  String?
  createdAt   DateTime @default(now())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
}

model ResourceAllocation {
  id           String   @id @default(uuid())
  resourceId   String
  resourceType String
  quantity     Int
  allocatedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id])
}

model Team {
  id        String   @id @default(uuid())
  name      String
  members   User[]   @relation("TeamMembers")
  createdAt DateTime @default(now())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  project   Project? @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  projectId String?
}

model ChangeLog {
  id        String   @id @default(uuid())
  change    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}
